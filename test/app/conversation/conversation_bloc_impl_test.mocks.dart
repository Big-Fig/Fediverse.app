// Mocks generated by Mockito 5.0.5 from annotations
// in fedi/test/app/conversation/conversation_bloc_impl_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i10;

import 'package:fedi/disposable/disposable.dart' as _i13;
import 'package:fedi/pleroma/api/account/my/pleroma_api_my_account_model.dart'
    as _i7;
import 'package:fedi/pleroma/api/account/my/pleroma_api_my_account_service_impl.dart'
    as _i19;
import 'package:fedi/pleroma/api/account/pleroma_api_account_model.dart' as _i8;
import 'package:fedi/pleroma/api/conversation/pleroma_api_conversation_model.dart'
    as _i3;
import 'package:fedi/pleroma/api/conversation/pleroma_api_conversation_service_impl.dart'
    as _i9;
import 'package:fedi/pleroma/api/pagination/pleroma_api_pagination_model.dart'
    as _i12;
import 'package:fedi/pleroma/api/pleroma_api_service.dart' as _i11;
import 'package:fedi/pleroma/api/rest/auth/pleroma_api_auth_rest_service.dart'
    as _i2;
import 'package:fedi/pleroma/api/rest/pleroma_api_rest_service.dart' as _i4;
import 'package:fedi/pleroma/api/status/auth/pleroma_api_auth_status_service_impl.dart'
    as _i18;
import 'package:fedi/pleroma/api/status/context/pleroma_api_status_context_model.dart'
    as _i6;
import 'package:fedi/pleroma/api/status/pleroma_api_status_model.dart' as _i5;
import 'package:flutter/src/widgets/editable_text.dart' as _i14;
import 'package:flutter/src/widgets/focus_manager.dart' as _i16;
import 'package:flutter/src/widgets/scroll_controller.dart' as _i15;
import 'package:mockito/mockito.dart' as _i1;
import 'package:rxdart/src/subjects/subject.dart' as _i17;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

class _FakeIPleromaApiAuthRestService extends _i1.Fake
    implements _i2.IPleromaApiAuthRestService {}

class _FakeIPleromaApiConversation extends _i1.Fake
    implements _i3.IPleromaApiConversation {}

class _FakeIPleromaApiRestService extends _i1.Fake
    implements _i4.IPleromaApiRestService {}

class _FakeIPleromaApiStatus extends _i1.Fake implements _i5.IPleromaApiStatus {
}

class _FakeIPleromaApiScheduledStatus extends _i1.Fake
    implements _i5.IPleromaApiScheduledStatus {}

class _FakePleromaApiStatusContext extends _i1.Fake
    implements _i6.PleromaApiStatusContext {}

class _FakeIPleromaApiMyAccount extends _i1.Fake
    implements _i7.IPleromaApiMyAccount {}

class _FakeIPleromaApiAccountRelationship extends _i1.Fake
    implements _i8.IPleromaApiAccountRelationship {}

/// A class which mocks [PleromaApiConversationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPleromaApiConversationService extends _i1.Mock
    implements _i9.PleromaApiConversationService {
  MockPleromaApiConversationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get conversationRelativeUrlPath =>
      (super.noSuchMethod(Invocation.getter(#conversationRelativeUrlPath),
          returnValue: '') as String);
  @override
  String get pleromaConversationRelativeUrlPath => (super.noSuchMethod(
      Invocation.getter(#pleromaConversationRelativeUrlPath),
      returnValue: '') as String);
  @override
  String get conversationStatusesRelativeUrlPath => (super.noSuchMethod(
      Invocation.getter(#conversationStatusesRelativeUrlPath),
      returnValue: '') as String);
  @override
  _i2.IPleromaApiAuthRestService get restService =>
      (super.noSuchMethod(Invocation.getter(#restService),
              returnValue: _FakeIPleromaApiAuthRestService())
          as _i2.IPleromaApiAuthRestService);
  @override
  _i2.IPleromaApiAuthRestService get restApiAuthService =>
      (super.noSuchMethod(Invocation.getter(#restApiAuthService),
              returnValue: _FakeIPleromaApiAuthRestService())
          as _i2.IPleromaApiAuthRestService);
  @override
  bool get isPleroma =>
      (super.noSuchMethod(Invocation.getter(#isPleroma), returnValue: false)
          as bool);
  @override
  bool get isMastodon =>
      (super.noSuchMethod(Invocation.getter(#isMastodon), returnValue: false)
          as bool);
  @override
  _i10.Stream<_i11.PleromaApiState> get pleromaApiStateStream =>
      (super.noSuchMethod(Invocation.getter(#pleromaApiStateStream),
              returnValue: Stream<_i11.PleromaApiState>.empty())
          as _i10.Stream<_i11.PleromaApiState>);
  @override
  _i11.PleromaApiState get pleromaApiState =>
      (super.noSuchMethod(Invocation.getter(#pleromaApiState),
          returnValue: _i11.PleromaApiState.validAuth) as _i11.PleromaApiState);
  @override
  bool get isConnected =>
      (super.noSuchMethod(Invocation.getter(#isConnected), returnValue: false)
          as bool);
  @override
  _i10.Stream<bool> get isConnectedStream =>
      (super.noSuchMethod(Invocation.getter(#isConnectedStream),
          returnValue: Stream<bool>.empty()) as _i10.Stream<bool>);
  @override
  bool get isDisposed =>
      (super.noSuchMethod(Invocation.getter(#isDisposed), returnValue: false)
          as bool);
  @override
  set isDisposed(bool? _isDisposed) =>
      super.noSuchMethod(Invocation.setter(#isDisposed, _isDisposed),
          returnValueForMissingStub: null);
  @override
  _i10.Future<List<_i5.IPleromaApiStatus>> getConversationStatuses(
          {String? conversationRemoteId,
          _i12.IPleromaApiPaginationRequest? pagination}) =>
      (super.noSuchMethod(
              Invocation.method(#getConversationStatuses, [], {
                #conversationRemoteId: conversationRemoteId,
                #pagination: pagination
              }),
              returnValue: Future<List<_i5.IPleromaApiStatus>>.value(
                  <_i5.IPleromaApiStatus>[]))
          as _i10.Future<List<_i5.IPleromaApiStatus>>);
  @override
  _i10.Future<_i3.IPleromaApiConversation> getConversation(
          {String? conversationRemoteId}) =>
      (super.noSuchMethod(
              Invocation.method(#getConversation, [],
                  {#conversationRemoteId: conversationRemoteId}),
              returnValue: Future<_i3.IPleromaApiConversation>.value(
                  _FakeIPleromaApiConversation()))
          as _i10.Future<_i3.IPleromaApiConversation>);
  @override
  _i10.Future<List<_i3.IPleromaApiConversation>> getConversations(
          {_i12.IPleromaApiPaginationRequest? pagination,
          List<String>? recipientsIds}) =>
      (super.noSuchMethod(
              Invocation.method(#getConversations, [],
                  {#pagination: pagination, #recipientsIds: recipientsIds}),
              returnValue: Future<List<_i3.IPleromaApiConversation>>.value(
                  <_i3.IPleromaApiConversation>[]))
          as _i10.Future<List<_i3.IPleromaApiConversation>>);
  @override
  _i10.Future<dynamic> deleteConversation({String? conversationRemoteId}) =>
      (super.noSuchMethod(
          Invocation.method(#deleteConversation, [],
              {#conversationRemoteId: conversationRemoteId}),
          returnValue: Future<dynamic>.value(null)) as _i10.Future<dynamic>);
  @override
  _i10.Future<_i3.IPleromaApiConversation> markConversationAsRead(
          {String? conversationRemoteId}) =>
      (super.noSuchMethod(
              Invocation.method(#markConversationAsRead, [],
                  {#conversationRemoteId: conversationRemoteId}),
              returnValue: Future<_i3.IPleromaApiConversation>.value(
                  _FakeIPleromaApiConversation()))
          as _i10.Future<_i3.IPleromaApiConversation>);
  @override
  void addDisposable(
          {_i13.IDisposable? disposable,
          _i10.StreamSubscription<dynamic>? streamSubscription,
          _i14.TextEditingController? textEditingController,
          _i15.ScrollController? scrollController,
          _i16.FocusNode? focusNode,
          _i17.Subject<dynamic>? subject,
          _i10.StreamController<dynamic>? streamController,
          _i10.Timer? timer,
          _i10.FutureOr<dynamic>? Function()? custom}) =>
      super.noSuchMethod(
          Invocation.method(#addDisposable, [], {
            #disposable: disposable,
            #streamSubscription: streamSubscription,
            #textEditingController: textEditingController,
            #scrollController: scrollController,
            #focusNode: focusNode,
            #subject: subject,
            #streamController: streamController,
            #timer: timer,
            #custom: custom
          }),
          returnValueForMissingStub: null);
  @override
  _i10.Future<dynamic> dispose() =>
      (super.noSuchMethod(Invocation.method(#dispose, []),
          returnValue: Future<dynamic>.value(null)) as _i10.Future<dynamic>);
}

/// A class which mocks [PleromaApiAuthStatusService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPleromaApiAuthStatusService extends _i1.Mock
    implements _i18.PleromaApiAuthStatusService {
  MockPleromaApiAuthStatusService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.IPleromaApiAuthRestService get authRestService =>
      (super.noSuchMethod(Invocation.getter(#authRestService),
              returnValue: _FakeIPleromaApiAuthRestService())
          as _i2.IPleromaApiAuthRestService);
  @override
  _i2.IPleromaApiAuthRestService get restApiAuthService =>
      (super.noSuchMethod(Invocation.getter(#restApiAuthService),
              returnValue: _FakeIPleromaApiAuthRestService())
          as _i2.IPleromaApiAuthRestService);
  @override
  bool get isMastodon =>
      (super.noSuchMethod(Invocation.getter(#isMastodon), returnValue: false)
          as bool);
  @override
  bool get isPleroma =>
      (super.noSuchMethod(Invocation.getter(#isPleroma), returnValue: false)
          as bool);
  @override
  String get statusRelativeUrlPath =>
      (super.noSuchMethod(Invocation.getter(#statusRelativeUrlPath),
          returnValue: '') as String);
  @override
  _i4.IPleromaApiRestService get restService =>
      (super.noSuchMethod(Invocation.getter(#restService),
              returnValue: _FakeIPleromaApiRestService())
          as _i4.IPleromaApiRestService);
  @override
  _i10.Stream<_i11.PleromaApiState> get pleromaApiStateStream =>
      (super.noSuchMethod(Invocation.getter(#pleromaApiStateStream),
              returnValue: Stream<_i11.PleromaApiState>.empty())
          as _i10.Stream<_i11.PleromaApiState>);
  @override
  _i11.PleromaApiState get pleromaApiState =>
      (super.noSuchMethod(Invocation.getter(#pleromaApiState),
          returnValue: _i11.PleromaApiState.validAuth) as _i11.PleromaApiState);
  @override
  bool get isConnected =>
      (super.noSuchMethod(Invocation.getter(#isConnected), returnValue: false)
          as bool);
  @override
  _i10.Stream<bool> get isConnectedStream =>
      (super.noSuchMethod(Invocation.getter(#isConnectedStream),
          returnValue: Stream<bool>.empty()) as _i10.Stream<bool>);
  @override
  bool get isDisposed =>
      (super.noSuchMethod(Invocation.getter(#isDisposed), returnValue: false)
          as bool);
  @override
  set isDisposed(bool? _isDisposed) =>
      super.noSuchMethod(Invocation.setter(#isDisposed, _isDisposed),
          returnValueForMissingStub: null);
  @override
  _i10.Future<dynamic> deleteStatus({String? statusRemoteId}) =>
      (super.noSuchMethod(
          Invocation.method(
              #deleteStatus, [], {#statusRemoteId: statusRemoteId}),
          returnValue: Future<dynamic>.value(null)) as _i10.Future<dynamic>);
  @override
  _i10.Future<_i5.IPleromaApiStatus> muteStatus(
          {String? statusRemoteId, int? expireDurationInSeconds}) =>
      (super.noSuchMethod(
              Invocation.method(#muteStatus, [], {
                #statusRemoteId: statusRemoteId,
                #expireDurationInSeconds: expireDurationInSeconds
              }),
              returnValue:
                  Future<_i5.IPleromaApiStatus>.value(_FakeIPleromaApiStatus()))
          as _i10.Future<_i5.IPleromaApiStatus>);
  @override
  _i10.Future<_i5.IPleromaApiStatus> unMuteStatus({String? statusRemoteId}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #unMuteStatus, [], {#statusRemoteId: statusRemoteId}),
              returnValue:
                  Future<_i5.IPleromaApiStatus>.value(_FakeIPleromaApiStatus()))
          as _i10.Future<_i5.IPleromaApiStatus>);
  @override
  _i10.Future<_i5.IPleromaApiStatus> pinStatus({String? statusRemoteId}) =>
      (super.noSuchMethod(
          Invocation.method(#pinStatus, [], {#statusRemoteId: statusRemoteId}),
          returnValue: Future<_i5.IPleromaApiStatus>.value(
              _FakeIPleromaApiStatus())) as _i10.Future<_i5.IPleromaApiStatus>);
  @override
  _i10.Future<_i5.IPleromaApiStatus> unPinStatus({String? statusRemoteId}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #unPinStatus, [], {#statusRemoteId: statusRemoteId}),
              returnValue:
                  Future<_i5.IPleromaApiStatus>.value(_FakeIPleromaApiStatus()))
          as _i10.Future<_i5.IPleromaApiStatus>);
  @override
  _i10.Future<List<_i8.IPleromaApiAccount>> favouritedBy(
          {String? statusRemoteId,
          _i12.IPleromaApiPaginationRequest? pagination}) =>
      (super.noSuchMethod(
              Invocation.method(#favouritedBy, [],
                  {#statusRemoteId: statusRemoteId, #pagination: pagination}),
              returnValue: Future<List<_i8.IPleromaApiAccount>>.value(
                  <_i8.IPleromaApiAccount>[]))
          as _i10.Future<List<_i8.IPleromaApiAccount>>);
  @override
  _i10.Future<List<_i8.IPleromaApiAccount>> rebloggedBy(
          {String? statusRemoteId,
          _i12.IPleromaApiPaginationRequest? pagination}) =>
      (super.noSuchMethod(
              Invocation.method(#rebloggedBy, [],
                  {#statusRemoteId: statusRemoteId, #pagination: pagination}),
              returnValue: Future<List<_i8.IPleromaApiAccount>>.value(
                  <_i8.IPleromaApiAccount>[]))
          as _i10.Future<List<_i8.IPleromaApiAccount>>);
  @override
  _i10.Future<_i5.IPleromaApiStatus> reblogStatus({String? statusRemoteId}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #reblogStatus, [], {#statusRemoteId: statusRemoteId}),
              returnValue:
                  Future<_i5.IPleromaApiStatus>.value(_FakeIPleromaApiStatus()))
          as _i10.Future<_i5.IPleromaApiStatus>);
  @override
  _i10.Future<_i5.IPleromaApiStatus> unReblogStatus({String? statusRemoteId}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #unReblogStatus, [], {#statusRemoteId: statusRemoteId}),
              returnValue:
                  Future<_i5.IPleromaApiStatus>.value(_FakeIPleromaApiStatus()))
          as _i10.Future<_i5.IPleromaApiStatus>);
  @override
  _i10.Future<_i5.IPleromaApiStatus> favouriteStatus(
          {String? statusRemoteId}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #favouriteStatus, [], {#statusRemoteId: statusRemoteId}),
              returnValue:
                  Future<_i5.IPleromaApiStatus>.value(_FakeIPleromaApiStatus()))
          as _i10.Future<_i5.IPleromaApiStatus>);
  @override
  _i10.Future<_i5.IPleromaApiStatus> unFavouriteStatus(
          {String? statusRemoteId}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #unFavouriteStatus, [], {#statusRemoteId: statusRemoteId}),
              returnValue:
                  Future<_i5.IPleromaApiStatus>.value(_FakeIPleromaApiStatus()))
          as _i10.Future<_i5.IPleromaApiStatus>);
  @override
  _i10.Future<_i5.IPleromaApiStatus> bookmarkStatus({String? statusRemoteId}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #bookmarkStatus, [], {#statusRemoteId: statusRemoteId}),
              returnValue:
                  Future<_i5.IPleromaApiStatus>.value(_FakeIPleromaApiStatus()))
          as _i10.Future<_i5.IPleromaApiStatus>);
  @override
  _i10.Future<_i5.IPleromaApiStatus> unBookmarkStatus(
          {String? statusRemoteId}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #unBookmarkStatus, [], {#statusRemoteId: statusRemoteId}),
              returnValue:
                  Future<_i5.IPleromaApiStatus>.value(_FakeIPleromaApiStatus()))
          as _i10.Future<_i5.IPleromaApiStatus>);
  @override
  _i10.Future<_i5.IPleromaApiStatus> postStatus(
          {_i5.IPleromaApiPostStatus? data}) =>
      (super.noSuchMethod(Invocation.method(#postStatus, [], {#data: data}),
              returnValue:
                  Future<_i5.IPleromaApiStatus>.value(_FakeIPleromaApiStatus()))
          as _i10.Future<_i5.IPleromaApiStatus>);
  @override
  _i10.Future<_i5.IPleromaApiScheduledStatus> scheduleStatus(
          {_i5.IPleromaApiScheduleStatus? data}) =>
      (super.noSuchMethod(Invocation.method(#scheduleStatus, [], {#data: data}),
              returnValue: Future<_i5.IPleromaApiScheduledStatus>.value(
                  _FakeIPleromaApiScheduledStatus()))
          as _i10.Future<_i5.IPleromaApiScheduledStatus>);
  @override
  _i10.Future<_i5.IPleromaApiStatus> getStatus({String? statusRemoteId}) =>
      (super.noSuchMethod(
          Invocation.method(#getStatus, [], {#statusRemoteId: statusRemoteId}),
          returnValue: Future<_i5.IPleromaApiStatus>.value(
              _FakeIPleromaApiStatus())) as _i10.Future<_i5.IPleromaApiStatus>);
  @override
  _i10.Future<_i6.PleromaApiStatusContext> getStatusContext(
          {String? statusRemoteId}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #getStatusContext, [], {#statusRemoteId: statusRemoteId}),
              returnValue: Future<_i6.PleromaApiStatusContext>.value(
                  _FakePleromaApiStatusContext()))
          as _i10.Future<_i6.PleromaApiStatusContext>);
  @override
  void addDisposable(
          {_i13.IDisposable? disposable,
          _i10.StreamSubscription<dynamic>? streamSubscription,
          _i14.TextEditingController? textEditingController,
          _i15.ScrollController? scrollController,
          _i16.FocusNode? focusNode,
          _i17.Subject<dynamic>? subject,
          _i10.StreamController<dynamic>? streamController,
          _i10.Timer? timer,
          _i10.FutureOr<dynamic>? Function()? custom}) =>
      super.noSuchMethod(
          Invocation.method(#addDisposable, [], {
            #disposable: disposable,
            #streamSubscription: streamSubscription,
            #textEditingController: textEditingController,
            #scrollController: scrollController,
            #focusNode: focusNode,
            #subject: subject,
            #streamController: streamController,
            #timer: timer,
            #custom: custom
          }),
          returnValueForMissingStub: null);
  @override
  _i10.Future<dynamic> dispose() =>
      (super.noSuchMethod(Invocation.method(#dispose, []),
          returnValue: Future<dynamic>.value(null)) as _i10.Future<dynamic>);
}

/// A class which mocks [PleromaApiMyAccountService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPleromaApiMyAccountService extends _i1.Mock
    implements _i19.PleromaApiMyAccountService {
  MockPleromaApiMyAccountService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get verifyProfileRelativeUrlPath =>
      (super.noSuchMethod(Invocation.getter(#verifyProfileRelativeUrlPath),
          returnValue: '') as String);
  @override
  String get editProfileRelativeUrlPath =>
      (super.noSuchMethod(Invocation.getter(#editProfileRelativeUrlPath),
          returnValue: '') as String);
  @override
  _i2.IPleromaApiAuthRestService get restService =>
      (super.noSuchMethod(Invocation.getter(#restService),
              returnValue: _FakeIPleromaApiAuthRestService())
          as _i2.IPleromaApiAuthRestService);
  @override
  _i2.IPleromaApiAuthRestService get restApiAuthService =>
      (super.noSuchMethod(Invocation.getter(#restApiAuthService),
              returnValue: _FakeIPleromaApiAuthRestService())
          as _i2.IPleromaApiAuthRestService);
  @override
  bool get isPleroma =>
      (super.noSuchMethod(Invocation.getter(#isPleroma), returnValue: false)
          as bool);
  @override
  bool get isMastodon =>
      (super.noSuchMethod(Invocation.getter(#isMastodon), returnValue: false)
          as bool);
  @override
  _i10.Stream<_i11.PleromaApiState> get pleromaApiStateStream =>
      (super.noSuchMethod(Invocation.getter(#pleromaApiStateStream),
              returnValue: Stream<_i11.PleromaApiState>.empty())
          as _i10.Stream<_i11.PleromaApiState>);
  @override
  _i11.PleromaApiState get pleromaApiState =>
      (super.noSuchMethod(Invocation.getter(#pleromaApiState),
          returnValue: _i11.PleromaApiState.validAuth) as _i11.PleromaApiState);
  @override
  bool get isConnected =>
      (super.noSuchMethod(Invocation.getter(#isConnected), returnValue: false)
          as bool);
  @override
  _i10.Stream<bool> get isConnectedStream =>
      (super.noSuchMethod(Invocation.getter(#isConnectedStream),
          returnValue: Stream<bool>.empty()) as _i10.Stream<bool>);
  @override
  bool get isDisposed =>
      (super.noSuchMethod(Invocation.getter(#isDisposed), returnValue: false)
          as bool);
  @override
  set isDisposed(bool? _isDisposed) =>
      super.noSuchMethod(Invocation.setter(#isDisposed, _isDisposed),
          returnValueForMissingStub: null);
  @override
  _i10.Future<_i7.IPleromaApiMyAccount> updateCredentials(
          _i7.IPleromaApiMyAccountEdit? data) =>
      (super.noSuchMethod(Invocation.method(#updateCredentials, [data]),
              returnValue: Future<_i7.IPleromaApiMyAccount>.value(
                  _FakeIPleromaApiMyAccount()))
          as _i10.Future<_i7.IPleromaApiMyAccount>);
  @override
  _i10.Future<_i7.IPleromaApiMyAccount> updateFiles(
          _i7.PleromaApiMyAccountFilesRequest? accountFiles) =>
      (super.noSuchMethod(Invocation.method(#updateFiles, [accountFiles]),
              returnValue: Future<_i7.IPleromaApiMyAccount>.value(
                  _FakeIPleromaApiMyAccount()))
          as _i10.Future<_i7.IPleromaApiMyAccount>);
  @override
  _i10.Future<_i7.IPleromaApiMyAccount> verifyCredentials() =>
      (super.noSuchMethod(Invocation.method(#verifyCredentials, []),
              returnValue: Future<_i7.IPleromaApiMyAccount>.value(
                  _FakeIPleromaApiMyAccount()))
          as _i10.Future<_i7.IPleromaApiMyAccount>);
  @override
  _i10.Future<List<_i5.IPleromaApiStatus>> getBookmarks(
          {_i12.IPleromaApiPaginationRequest? pagination}) =>
      (super.noSuchMethod(
              Invocation.method(#getBookmarks, [], {#pagination: pagination}),
              returnValue: Future<List<_i5.IPleromaApiStatus>>.value(
                  <_i5.IPleromaApiStatus>[]))
          as _i10.Future<List<_i5.IPleromaApiStatus>>);
  @override
  _i10.Future<List<_i5.IPleromaApiStatus>> getFavourites(
          {_i12.IPleromaApiPaginationRequest? pagination}) =>
      (super.noSuchMethod(
              Invocation.method(#getFavourites, [], {#pagination: pagination}),
              returnValue: Future<List<_i5.IPleromaApiStatus>>.value(
                  <_i5.IPleromaApiStatus>[]))
          as _i10.Future<List<_i5.IPleromaApiStatus>>);
  @override
  _i10.Future<List<_i8.IPleromaApiAccount>> getFollowRequests(
          {_i12.IPleromaApiPaginationRequest? pagination}) =>
      (super.noSuchMethod(
          Invocation.method(#getFollowRequests, [], {#pagination: pagination}),
          returnValue: Future<List<_i8.IPleromaApiAccount>>.value(
              <_i8.IPleromaApiAccount>[])) as _i10
          .Future<List<_i8.IPleromaApiAccount>>);
  @override
  _i10.Future<_i8.IPleromaApiAccountRelationship> acceptFollowRequest(
          {String? accountRemoteId}) =>
      (super.noSuchMethod(
          Invocation.method(
              #acceptFollowRequest, [], {#accountRemoteId: accountRemoteId}),
          returnValue: Future<_i8.IPleromaApiAccountRelationship>.value(
              _FakeIPleromaApiAccountRelationship())) as _i10
          .Future<_i8.IPleromaApiAccountRelationship>);
  @override
  _i10.Future<_i8.IPleromaApiAccountRelationship> rejectFollowRequest(
          {String? accountRemoteId}) =>
      (super.noSuchMethod(
          Invocation.method(
              #rejectFollowRequest, [], {#accountRemoteId: accountRemoteId}),
          returnValue: Future<_i8.IPleromaApiAccountRelationship>.value(
              _FakeIPleromaApiAccountRelationship())) as _i10
          .Future<_i8.IPleromaApiAccountRelationship>);
  @override
  _i10.Future<List<String>> getDomainBlocks(
          {_i12.IPleromaApiPaginationRequest? pagination}) =>
      (super.noSuchMethod(
          Invocation.method(#getDomainBlocks, [], {#pagination: pagination}),
          returnValue:
              Future<List<String>>.value(<String>[])) as _i10
          .Future<List<String>>);
  @override
  _i10.Future<List<_i8.IPleromaApiAccount>> getAccountBlocks(
          {_i12.IPleromaApiPaginationRequest? pagination}) =>
      (super.noSuchMethod(
          Invocation.method(#getAccountBlocks, [], {#pagination: pagination}),
          returnValue: Future<List<_i8.IPleromaApiAccount>>.value(
              <_i8.IPleromaApiAccount>[])) as _i10
          .Future<List<_i8.IPleromaApiAccount>>);
  @override
  _i10.Future<List<_i8.IPleromaApiAccount>> getAccountMutes(
          {_i12.IPleromaApiPaginationRequest? pagination}) =>
      (super.noSuchMethod(
          Invocation.method(#getAccountMutes, [], {#pagination: pagination}),
          returnValue: Future<List<_i8.IPleromaApiAccount>>.value(
              <_i8.IPleromaApiAccount>[])) as _i10
          .Future<List<_i8.IPleromaApiAccount>>);
  @override
  void addDisposable(
          {_i13.IDisposable? disposable,
          _i10.StreamSubscription<dynamic>? streamSubscription,
          _i14.TextEditingController? textEditingController,
          _i15.ScrollController? scrollController,
          _i16.FocusNode? focusNode,
          _i17.Subject<dynamic>? subject,
          _i10.StreamController<dynamic>? streamController,
          _i10.Timer? timer,
          _i10.FutureOr<dynamic>? Function()? custom}) =>
      super.noSuchMethod(
          Invocation.method(#addDisposable, [], {
            #disposable: disposable,
            #streamSubscription: streamSubscription,
            #textEditingController: textEditingController,
            #scrollController: scrollController,
            #focusNode: focusNode,
            #subject: subject,
            #streamController: streamController,
            #timer: timer,
            #custom: custom
          }),
          returnValueForMissingStub: null);
  @override
  _i10.Future<dynamic> dispose() =>
      (super.noSuchMethod(Invocation.method(#dispose, []),
          returnValue: Future<dynamic>.value(null)) as _i10.Future<dynamic>);
}
