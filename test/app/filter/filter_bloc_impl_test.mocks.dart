// Mocks generated by Mockito 5.0.3 from annotations
// in fedi/test/app/filter/filter_bloc_impl_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:fedi/pleroma/api/pleroma_api_service.dart' as _i6;
import 'package:fedi/pleroma/filter/pleroma_filter_model.dart' as _i3;
import 'package:fedi/pleroma/filter/pleroma_filter_service_impl.dart' as _i4;
import 'package:fedi/pleroma/pagination/pleroma_pagination_model.dart' as _i8;
import 'package:fedi/pleroma/rest/pleroma_rest_service.dart' as _i2;
import 'package:http/src/response.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

class _FakeIPleromaRestService extends _i1.Fake
    implements _i2.IPleromaRestService {}

class _FakeIPleromaFilter extends _i1.Fake implements _i3.IPleromaFilter {}

/// A class which mocks [PleromaFilterService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPleromaFilterService extends _i1.Mock
    implements _i4.PleromaFilterService {
  MockPleromaFilterService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get filterRelativeUrlPath =>
      (super.noSuchMethod(Invocation.getter(#filterRelativeUrlPath),
          returnValue: '') as String);
  @override
  _i2.IPleromaRestService get restService =>
      (super.noSuchMethod(Invocation.getter(#restService),
          returnValue: _FakeIPleromaRestService()) as _i2.IPleromaRestService);
  @override
  _i5.Stream<_i6.PleromaApiState> get pleromaApiStateStream =>
      (super.noSuchMethod(Invocation.getter(#pleromaApiStateStream),
              returnValue: Stream<_i6.PleromaApiState>.empty())
          as _i5.Stream<_i6.PleromaApiState>);
  @override
  _i6.PleromaApiState get pleromaApiState =>
      (super.noSuchMethod(Invocation.getter(#pleromaApiState),
          returnValue: _i6.PleromaApiState.validAuth) as _i6.PleromaApiState);
  @override
  bool get isConnected =>
      (super.noSuchMethod(Invocation.getter(#isConnected), returnValue: false)
          as bool);
  @override
  _i5.Stream<bool> get isConnectedStream =>
      (super.noSuchMethod(Invocation.getter(#isConnectedStream),
          returnValue: Stream<bool>.empty()) as _i5.Stream<bool>);
  @override
  bool get isDisposed =>
      (super.noSuchMethod(Invocation.getter(#isDisposed), returnValue: false)
          as bool);
  @override
  set isDisposed(bool? _isDisposed) =>
      super.noSuchMethod(Invocation.setter(#isDisposed, _isDisposed),
          returnValueForMissingStub: null);
  @override
  _i3.IPleromaFilter parseFilterResponse(_i7.Response? httpResponse) => (super
      .noSuchMethod(Invocation.method(#parseFilterResponse, [httpResponse]),
          returnValue: _FakeIPleromaFilter()) as _i3.IPleromaFilter);
  @override
  List<_i3.IPleromaFilter> parseFilterListResponse(
          _i7.Response? httpResponse) =>
      (super.noSuchMethod(
          Invocation.method(#parseFilterListResponse, [httpResponse]),
          returnValue: <_i3.IPleromaFilter>[]) as List<_i3.IPleromaFilter>);
  @override
  _i5.Future<List<_i3.IPleromaFilter>> getFilters(
          {_i8.IPleromaPaginationRequest? pagination}) =>
      (super.noSuchMethod(
              Invocation.method(#getFilters, [], {#pagination: pagination}),
              returnValue: Future.value(<_i3.IPleromaFilter>[]))
          as _i5.Future<List<_i3.IPleromaFilter>>);
  @override
  _i5.Future<_i3.IPleromaFilter> getFilter({String? filterRemoteId}) => (super
      .noSuchMethod(
          Invocation.method(#getFilter, [], {#filterRemoteId: filterRemoteId}),
          returnValue: Future.value(_FakeIPleromaFilter())) as _i5
      .Future<_i3.IPleromaFilter>);
  @override
  _i5.Future<dynamic> deleteFilter({String? filterRemoteId}) =>
      (super.noSuchMethod(
          Invocation.method(
              #deleteFilter, [], {#filterRemoteId: filterRemoteId}),
          returnValue: Future.value(null)) as _i5.Future<dynamic>);
  @override
  _i5.Future<_i3.IPleromaFilter> createFilter(
          {_i3.IPostPleromaFilter? postPleromaFilter}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #createFilter, [], {#postPleromaFilter: postPleromaFilter}),
              returnValue: Future.value(_FakeIPleromaFilter()))
          as _i5.Future<_i3.IPleromaFilter>);
  @override
  _i5.Future<_i3.IPleromaFilter> updateFilter(
          {String? filterRemoteId,
          _i3.IPostPleromaFilter? postPleromaFilter}) =>
      (super.noSuchMethod(
              Invocation.method(#updateFilter, [], {
                #filterRemoteId: filterRemoteId,
                #postPleromaFilter: postPleromaFilter
              }),
              returnValue: Future.value(_FakeIPleromaFilter()))
          as _i5.Future<_i3.IPleromaFilter>);
  @override
  _i5.Future<dynamic> dispose() =>
      (super.noSuchMethod(Invocation.method(#dispose, []),
          returnValue: Future.value(null)) as _i5.Future<dynamic>);
}
