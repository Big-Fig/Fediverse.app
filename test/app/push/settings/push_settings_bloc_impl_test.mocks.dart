// Mocks generated by Mockito 5.0.5 from annotations
// in fedi/test/app/push/settings/push_settings_bloc_impl_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:fedi/pleroma/api/pleroma_api_service.dart' as _i6;
import 'package:fedi/pleroma/api/push/pleroma_api_push_model.dart' as _i3;
import 'package:fedi/pleroma/api/push/pleroma_api_push_service.dart' as _i4;
import 'package:fedi/push/fcm/fcm_push_service.dart' as _i8;
import 'package:fedi/push/push_model.dart' as _i9;
import 'package:fedi/push/relay/push_relay_service.dart' as _i7;
import 'package:fedi/rest/rest_service.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

class _FakeIRestService extends _i1.Fake implements _i2.IRestService {}

class _FakePleromaApiPushSubscription extends _i1.Fake
    implements _i3.PleromaApiPushSubscription {}

/// A class which mocks [IPleromaApiPushService].
///
/// See the documentation for Mockito's code generation for more information.
class MockIPleromaApiPushService extends _i1.Mock
    implements _i4.IPleromaApiPushService {
  MockIPleromaApiPushService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.IRestService get restService =>
      (super.noSuchMethod(Invocation.getter(#restService),
          returnValue: _FakeIRestService()) as _i2.IRestService);
  @override
  _i5.Stream<_i6.PleromaApiState> get pleromaApiStateStream =>
      (super.noSuchMethod(Invocation.getter(#pleromaApiStateStream),
              returnValue: Stream<_i6.PleromaApiState>.empty())
          as _i5.Stream<_i6.PleromaApiState>);
  @override
  _i6.PleromaApiState get pleromaApiState =>
      (super.noSuchMethod(Invocation.getter(#pleromaApiState),
          returnValue: _i6.PleromaApiState.validAuth) as _i6.PleromaApiState);
  @override
  _i5.Stream<bool> get isConnectedStream =>
      (super.noSuchMethod(Invocation.getter(#isConnectedStream),
          returnValue: Stream<bool>.empty()) as _i5.Stream<bool>);
  @override
  bool get isConnected =>
      (super.noSuchMethod(Invocation.getter(#isConnected), returnValue: false)
          as bool);
  @override
  _i5.Future<_i3.PleromaApiPushSubscription> subscribe(
          {String? endpointCallbackUrl,
          _i3.PleromaApiPushSubscribeData? data}) =>
      (super.noSuchMethod(
              Invocation.method(#subscribe, [],
                  {#endpointCallbackUrl: endpointCallbackUrl, #data: data}),
              returnValue: Future<_i3.PleromaApiPushSubscription>.value(
                  _FakePleromaApiPushSubscription()))
          as _i5.Future<_i3.PleromaApiPushSubscription>);
  @override
  _i5.Future<_i3.PleromaApiPushSubscription> retrieveCurrentSubscription() =>
      (super.noSuchMethod(Invocation.method(#retrieveCurrentSubscription, []),
              returnValue: Future<_i3.PleromaApiPushSubscription>.value(
                  _FakePleromaApiPushSubscription()))
          as _i5.Future<_i3.PleromaApiPushSubscription>);
  @override
  _i5.Future<dynamic> unsubscribe() =>
      (super.noSuchMethod(Invocation.method(#unsubscribe, []),
          returnValue: Future<dynamic>.value(null)) as _i5.Future<dynamic>);
}

/// A class which mocks [IPushRelayService].
///
/// See the documentation for Mockito's code generation for more information.
class MockIPushRelayService extends _i1.Mock implements _i7.IPushRelayService {
  MockIPushRelayService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isDisposed =>
      (super.noSuchMethod(Invocation.getter(#isDisposed), returnValue: false)
          as bool);
  @override
  String createPushRelayEndPointUrl(
          {String? account, Uri? baseServerUrl, String? fcmDeviceToken}) =>
      (super.noSuchMethod(
          Invocation.method(#createPushRelayEndPointUrl, [], {
            #account: account,
            #baseServerUrl: baseServerUrl,
            #fcmDeviceToken: fcmDeviceToken
          }),
          returnValue: '') as String);
  @override
  _i5.Future<dynamic> dispose() =>
      (super.noSuchMethod(Invocation.method(#dispose, []),
          returnValue: Future<dynamic>.value(null)) as _i5.Future<dynamic>);
}

/// A class which mocks [IFcmPushService].
///
/// See the documentation for Mockito's code generation for more information.
class MockIFcmPushService extends _i1.Mock implements _i8.IFcmPushService {
  MockIFcmPushService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Stream<String> get deviceTokenStream =>
      (super.noSuchMethod(Invocation.getter(#deviceTokenStream),
          returnValue: Stream<String>.empty()) as _i5.Stream<String>);
  @override
  _i5.Stream<_i9.PushMessage> get messageStream =>
      (super.noSuchMethod(Invocation.getter(#messageStream),
              returnValue: Stream<_i9.PushMessage>.empty())
          as _i5.Stream<_i9.PushMessage>);
  @override
  bool get isDisposed =>
      (super.noSuchMethod(Invocation.getter(#isDisposed), returnValue: false)
          as bool);
  @override
  _i5.Future<bool> askPermissions() =>
      (super.noSuchMethod(Invocation.method(#askPermissions, []),
          returnValue: Future<bool>.value(false)) as _i5.Future<bool>);
  @override
  void clearInitialMessage() =>
      super.noSuchMethod(Invocation.method(#clearInitialMessage, []),
          returnValueForMissingStub: null);
  @override
  _i5.Future<dynamic> dispose() =>
      (super.noSuchMethod(Invocation.method(#dispose, []),
          returnValue: Future<dynamic>.value(null)) as _i5.Future<dynamic>);
}
