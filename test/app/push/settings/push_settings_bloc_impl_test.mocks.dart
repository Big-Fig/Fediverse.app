// Mocks generated by Mockito 5.0.16 from annotations
// in fedi/test/app/push/settings/push_settings_bloc_impl_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i7;

import 'package:connectivity_plus/connectivity_plus.dart' as _i15;
import 'package:easy_dispose/easy_dispose.dart' as _i16;
import 'package:fedi/async/loading/init/async_init_loading_model.dart' as _i13;
import 'package:fedi/connection/connection_service.dart' as _i14;
import 'package:fedi/push/fcm/fcm_push_service.dart' as _i11;
import 'package:fedi/push/push_model.dart' as _i12;
import 'package:fedi/push/relay/push_relay_service.dart' as _i10;
import 'package:fediverse_api/fediverse_api.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:unifedi_api/src/api/feature/unifedi_api_feature_model.dart'
    as _i2;
import 'package:unifedi_api/src/api/push/subscription/alerts/unifedi_api_push_subscription_alerts_model.dart'
    as _i9;
import 'package:unifedi_api/src/api/push/subscription/metadata/unifedi_api_push_subscription_metadata_model.dart'
    as _i8;
import 'package:unifedi_api/src/api/push/subscription/service/unifedi_api_push_subscription_service.dart'
    as _i6;
import 'package:unifedi_api/src/api/push/subscription/unifedi_api_push_subscription_model.dart'
    as _i4;
import 'package:unifedi_api/src/api/rest/unifedi_api_rest_service.dart' as _i3;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeIUnifediApiFeature_0 extends _i1.Fake
    implements _i2.IUnifediApiFeature {}

class _FakeIUnifediApiRestService_1 extends _i1.Fake
    implements _i3.IUnifediApiRestService {}

class _FakeIUnifediApiPushSubscription_2 extends _i1.Fake
    implements _i4.IUnifediApiPushSubscription {}

class _FakeFediverseApiFeatureRequirementState_3 extends _i1.Fake
    implements _i5.FediverseApiFeatureRequirementState {}

/// A class which mocks [IUnifediApiPushSubscriptionService].
///
/// See the documentation for Mockito's code generation for more information.
class MockIUnifediApiPushSubscriptionService extends _i1.Mock
    implements _i6.IUnifediApiPushSubscriptionService {
  MockIUnifediApiPushSubscriptionService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.IUnifediApiFeature get subscribeFeature =>
      (super.noSuchMethod(Invocation.getter(#subscribeFeature),
          returnValue: _FakeIUnifediApiFeature_0()) as _i2.IUnifediApiFeature);
  @override
  _i2.IUnifediApiFeature get subscribeChatMentionFeature =>
      (super.noSuchMethod(Invocation.getter(#subscribeChatMentionFeature),
          returnValue: _FakeIUnifediApiFeature_0()) as _i2.IUnifediApiFeature);
  @override
  _i2.IUnifediApiFeature get subscribeEmojiReactionFeature =>
      (super.noSuchMethod(Invocation.getter(#subscribeEmojiReactionFeature),
          returnValue: _FakeIUnifediApiFeature_0()) as _i2.IUnifediApiFeature);
  @override
  _i2.IUnifediApiFeature get getCurrentSubscriptionFeature =>
      (super.noSuchMethod(Invocation.getter(#getCurrentSubscriptionFeature),
          returnValue: _FakeIUnifediApiFeature_0()) as _i2.IUnifediApiFeature);
  @override
  _i2.IUnifediApiFeature get unsubscribeFeature =>
      (super.noSuchMethod(Invocation.getter(#unsubscribeFeature),
          returnValue: _FakeIUnifediApiFeature_0()) as _i2.IUnifediApiFeature);
  @override
  _i3.IUnifediApiRestService get restService =>
      (super.noSuchMethod(Invocation.getter(#restService),
              returnValue: _FakeIUnifediApiRestService_1())
          as _i3.IUnifediApiRestService);
  @override
  bool get isDisposed =>
      (super.noSuchMethod(Invocation.getter(#isDisposed), returnValue: false)
          as bool);
  @override
  _i7.Future<_i4.IUnifediApiPushSubscription> subscribe(
          {_i8.IUnifediApiPushSubscriptionMetadata? metadata,
          _i9.IUnifediApiPushSubscriptionAlerts? alerts}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #subscribe, [], {#metadata: metadata, #alerts: alerts}),
              returnValue: Future<_i4.IUnifediApiPushSubscription>.value(
                  _FakeIUnifediApiPushSubscription_2()))
          as _i7.Future<_i4.IUnifediApiPushSubscription>);
  @override
  _i7.Future<_i4.IUnifediApiPushSubscription> getCurrentSubscription() =>
      (super.noSuchMethod(Invocation.method(#getCurrentSubscription, []),
              returnValue: Future<_i4.IUnifediApiPushSubscription>.value(
                  _FakeIUnifediApiPushSubscription_2()))
          as _i7.Future<_i4.IUnifediApiPushSubscription>);
  @override
  _i7.Future<dynamic> unsubscribe() =>
      (super.noSuchMethod(Invocation.method(#unsubscribe, []),
          returnValue: Future<dynamic>.value()) as _i7.Future<dynamic>);
  @override
  _i5.FediverseApiFeatureRequirementState checkFeatureState(
          _i2.IUnifediApiFeature? feature) =>
      (super.noSuchMethod(Invocation.method(#checkFeatureState, [feature]),
              returnValue: _FakeFediverseApiFeatureRequirementState_3())
          as _i5.FediverseApiFeatureRequirementState);
  @override
  String toString() => super.toString();
  @override
  _i7.Future<dynamic> dispose() =>
      (super.noSuchMethod(Invocation.method(#dispose, []),
          returnValue: Future<dynamic>.value()) as _i7.Future<dynamic>);
}

/// A class which mocks [IPushRelayService].
///
/// See the documentation for Mockito's code generation for more information.
class MockIPushRelayService extends _i1.Mock implements _i10.IPushRelayService {
  MockIPushRelayService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get pushRelayBaseUrl =>
      (super.noSuchMethod(Invocation.getter(#pushRelayBaseUrl), returnValue: '')
          as String);
  @override
  bool get isDisposed =>
      (super.noSuchMethod(Invocation.getter(#isDisposed), returnValue: false)
          as bool);
  @override
  String createPushRelayEndPointUrl(
          {String? account, Uri? baseServerUrl, String? fcmDeviceToken}) =>
      (super.noSuchMethod(
          Invocation.method(#createPushRelayEndPointUrl, [], {
            #account: account,
            #baseServerUrl: baseServerUrl,
            #fcmDeviceToken: fcmDeviceToken
          }),
          returnValue: '') as String);
  @override
  _i7.Future<dynamic> dispose() =>
      (super.noSuchMethod(Invocation.method(#dispose, []),
          returnValue: Future<dynamic>.value()) as _i7.Future<dynamic>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [IFcmPushService].
///
/// See the documentation for Mockito's code generation for more information.
class MockIFcmPushService extends _i1.Mock implements _i11.IFcmPushService {
  MockIFcmPushService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Stream<String> get deviceTokenStream =>
      (super.noSuchMethod(Invocation.getter(#deviceTokenStream),
          returnValue: Stream<String>.empty()) as _i7.Stream<String>);
  @override
  _i7.Stream<_i12.PushMessage> get messageStream =>
      (super.noSuchMethod(Invocation.getter(#messageStream),
              returnValue: Stream<_i12.PushMessage>.empty())
          as _i7.Stream<_i12.PushMessage>);
  @override
  bool get isDisposed =>
      (super.noSuchMethod(Invocation.getter(#isDisposed), returnValue: false)
          as bool);
  @override
  _i7.Stream<_i13.AsyncInitLoadingState> get initLoadingStateStream =>
      (super.noSuchMethod(Invocation.getter(#initLoadingStateStream),
              returnValue: Stream<_i13.AsyncInitLoadingState>.empty())
          as _i7.Stream<_i13.AsyncInitLoadingState>);
  @override
  _i7.Stream<bool> get isLoadingStream =>
      (super.noSuchMethod(Invocation.getter(#isLoadingStream),
          returnValue: Stream<bool>.empty()) as _i7.Stream<bool>);
  @override
  _i7.Future<bool> askPermissions() =>
      (super.noSuchMethod(Invocation.method(#askPermissions, []),
          returnValue: Future<bool>.value(false)) as _i7.Future<bool>);
  @override
  void clearInitialMessage() =>
      super.noSuchMethod(Invocation.method(#clearInitialMessage, []),
          returnValueForMissingStub: null);
  @override
  _i7.Future<dynamic> dispose() =>
      (super.noSuchMethod(Invocation.method(#dispose, []),
          returnValue: Future<dynamic>.value()) as _i7.Future<dynamic>);
  @override
  String toString() => super.toString();
  @override
  _i7.Future<dynamic> performAsyncInit() =>
      (super.noSuchMethod(Invocation.method(#performAsyncInit, []),
          returnValue: Future<dynamic>.value()) as _i7.Future<dynamic>);
}

/// A class which mocks [IConnectionService].
///
/// See the documentation for Mockito's code generation for more information.
class MockIConnectionService extends _i1.Mock
    implements _i14.IConnectionService {
  MockIConnectionService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Stream<_i15.ConnectivityResult> get connectionStateStream =>
      (super.noSuchMethod(Invocation.getter(#connectionStateStream),
              returnValue: Stream<_i15.ConnectivityResult>.empty())
          as _i7.Stream<_i15.ConnectivityResult>);
  @override
  _i7.Stream<bool> get isConnectedStream =>
      (super.noSuchMethod(Invocation.getter(#isConnectedStream),
          returnValue: Stream<bool>.empty()) as _i7.Stream<bool>);
  @override
  bool get isConnected =>
      (super.noSuchMethod(Invocation.getter(#isConnected), returnValue: false)
          as bool);
  @override
  _i16.DisposeOrder get disposeOrder =>
      (super.noSuchMethod(Invocation.getter(#disposeOrder),
          returnValue: _i16.DisposeOrder.lifo) as _i16.DisposeOrder);
  @override
  bool get catchExceptions => (super
          .noSuchMethod(Invocation.getter(#catchExceptions), returnValue: false)
      as bool);
  @override
  List<_i16.IDisposable> get disposables =>
      (super.noSuchMethod(Invocation.getter(#disposables),
          returnValue: <_i16.IDisposable>[]) as List<_i16.IDisposable>);
  @override
  bool get isDisposed =>
      (super.noSuchMethod(Invocation.getter(#isDisposed), returnValue: false)
          as bool);
  @override
  set isDisposed(bool? _isDisposed) =>
      super.noSuchMethod(Invocation.setter(#isDisposed, _isDisposed),
          returnValueForMissingStub: null);
  @override
  _i7.Future<dynamic> internalAsyncInit() =>
      (super.noSuchMethod(Invocation.method(#internalAsyncInit, []),
          returnValue: Future<dynamic>.value()) as _i7.Future<dynamic>);
  @override
  String toString() => super.toString();
  @override
  void addDisposable(_i16.IDisposable? disposable) =>
      super.noSuchMethod(Invocation.method(#addDisposable, [disposable]),
          returnValueForMissingStub: null);
  @override
  void addDisposables(Iterable<_i16.IDisposable>? disposables) =>
      super.noSuchMethod(Invocation.method(#addDisposables, [disposables]),
          returnValueForMissingStub: null);
  @override
  _i7.Future<dynamic> performDispose() =>
      (super.noSuchMethod(Invocation.method(#performDispose, []),
          returnValue: Future<dynamic>.value()) as _i7.Future<dynamic>);
  @override
  _i7.Future<dynamic> dispose() =>
      (super.noSuchMethod(Invocation.method(#dispose, []),
          returnValue: Future<dynamic>.value()) as _i7.Future<dynamic>);
}
