// Mocks generated by Mockito 5.0.13 from annotations
// in base_fediverse_api/test/web_sockets/service/web_sockets_service_impl_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:base_fediverse_api/src/connection/connection_service_impl.dart'
    as _i3;
import 'package:connectivity_plus/connectivity_plus.dart' as _i2;
import 'package:easy_dispose/easy_dispose.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeConnectivity extends _i1.Fake implements _i2.Connectivity {}

/// A class which mocks [ConnectionService].
///
/// See the documentation for Mockito's code generation for more information.
class MockConnectionService extends _i1.Mock implements _i3.ConnectionService {
  MockConnectionService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Connectivity get connectivity =>
      (super.noSuchMethod(Invocation.getter(#connectivity),
          returnValue: _FakeConnectivity()) as _i2.Connectivity);

  @override
  _i4.Stream<_i2.ConnectivityResult> get connectionStateStream =>
      (super.noSuchMethod(Invocation.getter(#connectionStateStream),
              returnValue: Stream<_i2.ConnectivityResult>.empty())
          as _i4.Stream<_i2.ConnectivityResult>);

  @override
  _i4.Stream<bool> get isConnectedStream =>
      (super.noSuchMethod(Invocation.getter(#isConnectedStream),
          returnValue: Stream<bool>.empty()) as _i4.Stream<bool>);

  @override
  bool get isConnected =>
      (super.noSuchMethod(Invocation.getter(#isConnected), returnValue: false)
          as bool);

  @override
  _i5.DisposeOrder get disposeOrder =>
      (super.noSuchMethod(Invocation.getter(#disposeOrder),
          returnValue: _i5.DisposeOrder.lifo) as _i5.DisposeOrder);

  @override
  bool get catchExceptions => (super
          .noSuchMethod(Invocation.getter(#catchExceptions), returnValue: false)
      as bool);

  @override
  List<_i5.IDisposable> get disposables =>
      (super.noSuchMethod(Invocation.getter(#disposables),
          returnValue: <_i5.IDisposable>[]) as List<_i5.IDisposable>);

  @override
  bool get isDisposed =>
      (super.noSuchMethod(Invocation.getter(#isDisposed), returnValue: false)
          as bool);
  @override
  set isDisposed(bool? _isDisposed) =>
      super.noSuchMethod(Invocation.setter(#isDisposed, _isDisposed),
          returnValueForMissingStub: null);

  @override
  _i4.Future<dynamic> internalAsyncInit() =>
      (super.noSuchMethod(Invocation.method(#internalAsyncInit, []),
          returnValue: Future<dynamic>.value()) as _i4.Future<dynamic>);

  @override
  void addDisposable(_i5.IDisposable? disposable) =>
      super.noSuchMethod(Invocation.method(#addDisposable, [disposable]),
          returnValueForMissingStub: null);

  @override
  void addDisposables(Iterable<_i5.IDisposable>? disposables) =>
      super.noSuchMethod(Invocation.method(#addDisposables, [disposables]),
          returnValueForMissingStub: null);

  @override
  _i4.Future<dynamic> performDispose() =>
      (super.noSuchMethod(Invocation.method(#performDispose, []),
          returnValue: Future<dynamic>.value()) as _i4.Future<dynamic>);

  @override
  _i4.Future<dynamic> dispose() =>
      (super.noSuchMethod(Invocation.method(#dispose, []),
          returnValue: Future<dynamic>.value()) as _i4.Future<dynamic>);

  @override
  String toString() => super.toString();
}
