// Mocks generated by Mockito 5.0.16 from annotations
// in fedi_app/test/app/filter/filter_bloc_impl_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i7;

import 'package:fediverse_api/fediverse_api.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:unifedi_api/src/api/feature/unifedi_api_feature_model.dart'
    as _i2;
import 'package:unifedi_api/src/api/filter/post/unifedi_api_post_filter_model.dart'
    as _i9;
import 'package:unifedi_api/src/api/filter/service/unifedi_api_filter_service.dart'
    as _i6;
import 'package:unifedi_api/src/api/filter/unifedi_api_filter_model.dart'
    as _i4;
import 'package:unifedi_api/src/api/pagination/unifedi_api_pagination_model.dart'
    as _i8;
import 'package:unifedi_api/src/api/rest/unifedi_api_rest_service.dart' as _i3;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeIUnifediApiFeature_0 extends _i1.Fake
    implements _i2.IUnifediApiFeature {}

class _FakeIUnifediApiRestService_1 extends _i1.Fake
    implements _i3.IUnifediApiRestService {}

class _FakeIUnifediApiFilter_2 extends _i1.Fake
    implements _i4.IUnifediApiFilter {}

class _FakeFediverseApiFeatureRequirementState_3 extends _i1.Fake
    implements _i5.FediverseApiFeatureRequirementState {}

/// A class which mocks [IUnifediApiFilterService].
///
/// See the documentation for Mockito's code generation for more information.
class MockIUnifediApiFilterService extends _i1.Mock
    implements _i6.IUnifediApiFilterService {
  MockIUnifediApiFilterService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.IUnifediApiFeature get getFiltersFeature =>
      (super.noSuchMethod(Invocation.getter(#getFiltersFeature),
          returnValue: _FakeIUnifediApiFeature_0()) as _i2.IUnifediApiFeature);
  @override
  _i2.IUnifediApiFeature get getFilterFeature =>
      (super.noSuchMethod(Invocation.getter(#getFilterFeature),
          returnValue: _FakeIUnifediApiFeature_0()) as _i2.IUnifediApiFeature);
  @override
  _i2.IUnifediApiFeature get deleteFilterFeature =>
      (super.noSuchMethod(Invocation.getter(#deleteFilterFeature),
          returnValue: _FakeIUnifediApiFeature_0()) as _i2.IUnifediApiFeature);
  @override
  _i2.IUnifediApiFeature get createFilterFeature =>
      (super.noSuchMethod(Invocation.getter(#createFilterFeature),
          returnValue: _FakeIUnifediApiFeature_0()) as _i2.IUnifediApiFeature);
  @override
  _i2.IUnifediApiFeature get updateFilterFeature =>
      (super.noSuchMethod(Invocation.getter(#updateFilterFeature),
          returnValue: _FakeIUnifediApiFeature_0()) as _i2.IUnifediApiFeature);
  @override
  _i3.IUnifediApiRestService get restService =>
      (super.noSuchMethod(Invocation.getter(#restService),
              returnValue: _FakeIUnifediApiRestService_1())
          as _i3.IUnifediApiRestService);
  @override
  bool get isDisposed =>
      (super.noSuchMethod(Invocation.getter(#isDisposed), returnValue: false)
          as bool);
  @override
  _i7.Future<List<_i4.IUnifediApiFilter>> getFilters(
          {_i8.IUnifediApiPagination? pagination}) =>
      (super.noSuchMethod(
              Invocation.method(#getFilters, [], {#pagination: pagination}),
              returnValue: Future<List<_i4.IUnifediApiFilter>>.value(
                  <_i4.IUnifediApiFilter>[]))
          as _i7.Future<List<_i4.IUnifediApiFilter>>);
  @override
  _i7.Future<_i4.IUnifediApiFilter> getFilter({String? filterId}) => (super
      .noSuchMethod(Invocation.method(#getFilter, [], {#filterId: filterId}),
          returnValue: Future<_i4.IUnifediApiFilter>.value(
              _FakeIUnifediApiFilter_2())) as _i7
      .Future<_i4.IUnifediApiFilter>);
  @override
  _i7.Future<void> deleteFilter({String? filterId}) => (super.noSuchMethod(
      Invocation.method(#deleteFilter, [], {#filterId: filterId}),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i7.Future<void>);
  @override
  _i7.Future<_i4.IUnifediApiFilter> createFilter(
          {_i9.IUnifediApiPostFilter? postFilter}) =>
      (super.noSuchMethod(
              Invocation.method(#createFilter, [], {#postFilter: postFilter}),
              returnValue: Future<_i4.IUnifediApiFilter>.value(
                  _FakeIUnifediApiFilter_2()))
          as _i7.Future<_i4.IUnifediApiFilter>);
  @override
  _i7.Future<_i4.IUnifediApiFilter> updateFilter(
          {String? filterId, _i9.IUnifediApiPostFilter? postFilter}) =>
      (super.noSuchMethod(
              Invocation.method(#updateFilter, [],
                  {#filterId: filterId, #postFilter: postFilter}),
              returnValue: Future<_i4.IUnifediApiFilter>.value(
                  _FakeIUnifediApiFilter_2()))
          as _i7.Future<_i4.IUnifediApiFilter>);
  @override
  _i5.FediverseApiFeatureRequirementState checkFeatureState(
          _i2.IUnifediApiFeature? feature) =>
      (super.noSuchMethod(Invocation.method(#checkFeatureState, [feature]),
              returnValue: _FakeFediverseApiFeatureRequirementState_3())
          as _i5.FediverseApiFeatureRequirementState);
  @override
  String toString() => super.toString();
  @override
  _i7.Future<void> dispose() =>
      (super.noSuchMethod(Invocation.method(#dispose, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i7.Future<void>);
}
