on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

name: Create Release

jobs:
  build:
    name: Create Release
    runs-on: macos-latest
    steps:
      - name: Get version from tag
        id: tag_name
        run: |
          echo ::set-output name=current_version::${GITHUB_REF#refs/tags/v}
        shell: bash

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get Changelog Entry
        id: changelog_reader
        uses: mindsers/changelog-reader-action@v2
        with:
          validation_depth: 10
          version: ${{ steps.tag_name.outputs.current_version }}
          path: ./CHANGELOG.md

      - name: Decoding PROD ANDROID key.properties from secrets
        run: echo "${{ secrets.PROD_ANDROID_KEY_PROPERTIES_FILE_AS_BASE64 }}" | base64 --decode > android/key.properties

      - name: Decoding PROD ANDROID key.jks from secrets
        run: echo "${{ secrets.PROD_ANDROID_KEY_JKS_FILE_AS_BASE64 }}" | base64 --decode > android/key/key.jks

      - name: Decoding DEV env_dev.env from secrets
        run: echo "${{ secrets.DEV_ENV_CONFIG_FILE_AS_BASE64 }}" | base64 --decode > env_dev.env

      - name: Decoding PROD env_prod.env from secrets
        run: echo "${{ secrets.PROD_ENV_CONFIG_FILE_AS_BASE64 }}" | base64 --decode > env_prod.env

      - name: Decoding PROD ANDROID google-services.json from secrets
          run: echo "${{ secrets.PROD_GOOGLE_SERVICES_FILE_AS_BASE64 }}" | base64 --decode > android/app/src/prod/google-services.json

      - name: Decoding DEV ANDROID google-services.json from secrets
          run: echo "${{ secrets.DEV_GOOGLE_SERVICES_FILE_AS_BASE64 }}" | base64 --decode > android/app/src/dev/google-services.json

      - name: Decoding PROD IOS GoogleService-Info.plist from secrets
          run: echo "${{ secrets.PROD_GOOGLE_SERVICES_FILE_AS_BASE64 }}" | base64 --decode > ios/config/prod/GoogleService-Info.plist

      - name: Decoding DEV IOS GoogleService-Info.plist from secrets
          run: echo "${{ secrets.DEV_GOOGLE_SERVICES_FILE_AS_BASE64 }}" | base64 --decode > ios/config/dev/GoogleService-Info.plist

      - name: Decode PROD ANDROID upload-keystore.jks from secrets
          run: echo "${{ secrets.PLAY_STORE_UPLOAD_KEY }}" | base64 --decode > android/app/upload-keystore.jks

      - name: Decode PROD ANDROID upload-keystore.jks from secrets
          run: echo "${{ secrets.PLAY_STORE_UPLOAD_KEY }}" | base64 --decode > android/app/upload-keystore.jks

      # Set up Flutter.
      - name: Clone Flutter repository
        uses: subosito/flutter-action@v1
        with:
          flutter-version: '2.2.3'
          channel: 'any'
        # fork version with fvm parsing
        # uses: xal/flutter-action@feature/read-version-from-file-fixes
        # with:
        # parse: 'fvm'

      - run: flutter --version

      - name: Pub Get Packages
        run: flutter pub get

#      - name: Build Android APK dev flavor
#        run: flutter build apk --split-per-abi --flavor dev --release

      - name: Build Android APK prod flavor
        run: flutter build apk --split-per-abi --flavor prod --release

      - name: Build Android APPBUNDLE prod flavor
        run: flutter build appbundle --flavor prod --release
#
#      - name: Build iOS dev flavor
#        run: flutter build ios --release --no-codesign --flavor dev --release

      - name: Build ios prod flavor
        run: flutter build ios --release --no-codesign --flavor prod --release

      - name: Setup Fastlane ANDROID
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '2.6'
          bundler-cache: true
          working-directory: android

      - name: Deploy Android
      - run: bundle exec fastlane beta
        env:
          PLAY_STORE_UPLOAD_KEY: ${{ secrets.PLAY_STORE_UPLOAD_KEY }}
        working-directory: android

      - name: Setup Fastlane iOS
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '2.6'
          bundler-cache: true
          working-directory: ios

      - name: Deploy iOS
      - run: bundle exec fastlane beta
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ITC_TEAM_ID: ${{ secrets.APPLE_ITC_TEAM_ID }}
          APPLE_DEV_PORTAL_TEAM_ID: ${{ secrets.APPLE_DEV_PORTAL_TEAM_ID }}
          FASTLANE_PASSWORD: ${{ secrets.APPLE_FASTLANE_PASSWORD }}
        working-directory: android

      - name: Create Github Release
        uses: ncipollo/release-action@v1
        with:
#          artifacts: "build/app/outputs/apk/dev/release/*.apk,build/app/outputs/apk/prod/release/*.apk,build/app/outputs/bundle/prodRelease/*.aab"
          artifacts: "build/app/outputs/apk/prod/release/*.apk,build/app/outputs/bundle/prodRelease/*.aab"
          token: ${{ secrets.RELEASES_TOKEN }}
          tag: ${{ steps.changelog_reader.outputs.version }}
          name: Release ${{ steps.changelog_reader.outputs.version }}
          body: ${{ steps.changelog_reader.outputs.changes }}
          prerelease: ${{ steps.changelog_reader.outputs.status == 'prereleased' }}
          draft: ${{ steps.changelog_reader.outputs.status == 'unreleased' }}