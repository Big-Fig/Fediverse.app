include: package:all_lint_rules_community/all.yaml

analyzer:
  exclude:
    - lib/app/ui/fedi_icons.dart
    - test/resources/**
    - test/**/examples/**
    - lib/generated/**
    - lib/**.g.dart
    - test/**.mocks.dart
    - test/coverage_helper_test.dart
    - "**/*.freezed.dart"
    - "**/*.mocks.dart"
  plugins:
    - dart_code_metrics


  strong-mode:
    implicit-casts: false
    implicit-dynamic: false

  errors:
    # freezed related
    invalid_annotation_target: ignore
    # Without ignore here, we cause import of all_lint_rules to warn, because some rules conflict.
    # We explicitly enabled even conflicting rules and are fixing the conflicts in this file.
    included_file_warning: ignore
    # Treat missing required parameters as an error.
    #missing_required_param: error
    # Treat missing returns as an error, not as a hint or a warning.
   # missing_return: error
    # Don't assign new values to parameters of methods or functions.
    # Treat assigning new values to a parameter as a warning. We would almost like to set this
    #parameter_assignments: warning
    # Allow having TODOs in the code.
    todo: ignore


    implicit_dynamic_variable: ignore
    implicit_dynamic_method: ignore
    implicit_dynamic_parameter: ignore
    implicit_dynamic_type: ignore
    return_of_invalid_type: ignore
    non_bool_condition: ignore
    non_bool_operand: ignore
    implicit_dynamic_function: ignore
    implicit_dynamic_list_literal: ignore
    implicit_dynamic_map_literal: ignore
    throw_of_invalid_type: ignore
    argument_type_not_assignable: ignore
    parameter_assignments: ignore
    avoid_print: ignore
    avoid_annotating_with_dynamic: ignore
    avoid_bool_literals_in_conditional_expressions: ignore
    avoid_catches_without_on_clauses: ignore
    avoid_classes_with_only_static_members: ignore
    avoid_unused_constructor_parameters: ignore
    lines_longer_than_80_chars: ignore
    avoid_dynamic_calls: ignore
    avoid_equals_and_hash_code_on_mutable_classes: ignore
    avoid_positional_boolean_parameters: ignore
    avoid_redundant_argument_values: ignore
    avoid_field_initializers_in_const_classes: ignore
    avoid_function_literals_in_foreach_calls: ignore
    library_private_types_in_public_api: ignore
    cascade_invocations: ignore
    diagnostic_describe_all_properties: ignore
    prefer_relative_imports: ignore
    unnecessary_lambdas: ignore
    depend_on_referenced_packages: ignore
    use_build_context_synchronously: ignore
    avoid_multiple_declarations_per_line: ignore
    implementation_imports: ignore
    unnecessary_final: ignore
    no_default_cases: ignore
    noop_primitive_operations: ignore
    only_throw_errors: ignore
    prefer_asserts_with_message: ignore
    prefer_const_literals_to_create_immutables: ignore
    prefer_const_constructors: ignore
    require_trailing_commas: ignore
    join_return_with_assignment: ignore
    prefer_constructors_over_static_methods: ignore
    prefer_const_constructors_in_immutables: ignore
    sort_constructors_first: ignore
    prefer_double_quotes: ignore
    always_specify_types: ignore
    use_key_in_widget_constructors: ignore
    prefer_final_locals: ignore
    prefer_expression_function_bodies: ignore
    prefer_final_in_for_each: ignore
    unnecessary_parenthesis: ignore
    unnecessary_string_interpolations: ignore
    prefer_interpolation_to_compose_strings: ignore
    prefer_int_literals: ignore
    use_is_even_rather_than_modulo: ignore
    prefer_typing_uninitialized_variables: ignore
    sized_box_for_whitespace: ignore
    sort_unnamed_constructors_first: ignore
    prefer_null_aware_method_calls: ignore
    type_annotate_public_apis: ignore
    sort_pub_dependencies: ignore
    unnecessary_await_in_return: ignore
    flutter_style_todos: ignore
    use_if_null_to_convert_nulls_to_bools: ignore
    unnecessary_null_checks: ignore
    prefer_function_declarations_over_variables: ignore
    null_check_on_nullable_type_parameter: ignore
    prefer_initializing_formals: ignore
    use_late_for_private_fields_and_variables: ignore


# LINTER Preferences
#
# Explicitly disable only the rules we do not want.
linter:
  rules:
    # ALWAYS separate the control structure expression from its statement.
    # This sometimes makes things more unclear when one line is enough.
    # Also single line `if`s are fine as recommended in Effective Dart "DO format your code using dartfmt".
    always_put_control_body_on_new_line: false

    # ALWAYS specify @required on named parameter before other named parameters.
    # Conflicts with the convention used by flutter, which puts `Key key`
    # and `@required Widget child` last.
    always_put_required_named_parameters_first: false

    # Followed by more turned OFF lint rules as preferred/needed/desired and always
    # turning off at least conflicting rules.

    public_member_api_docs: false
    prefer_final_parameters: false
    avoid_types_on_closure_parameters: false

    implicit_dynamic_variable: false
    implicit_dynamic_method: false
    implicit_dynamic_parameter: false
    implicit_dynamic_type: false
    return_of_invalid_type: false
    non_bool_condition: false
    non_bool_operand: false
    implicit_dynamic_function: false
    implicit_dynamic_list_literal: false
    implicit_dynamic_map_literal: false
    throw_of_invalid_type: false
    argument_type_not_assignable: false

dart_code_metrics:
  anti-patterns:
    - long-method
    - long-parameter-list
  metrics:
    cyclomatic-complexity: 20
    lines-of-code: 100
    source-lines-of-code: 65
#    source-lines-of-code: 50 should be 50
    maximum-nesting: 5
    weight-of-class: 0.33
    number-of-arguments: 6
    number-of-parameters: 6
    number-of-methods: 4
  metrics-exclude:
    - test/**
    - test_driver/**
  rules:
    - binary-expression-operand-order
    - double-literal-format
    - no-empty-block
    - no-equal-then-else
    - no-equal-arguments
    - no-object-declaration
#    - no-magic-number
#    - prefer-trailing-comma
    - no-boolean-literal-compare
    - newline-before-return
    - double-literal-format
    - binary-expression-operand-order
    - no-object-declaration
    - avoid-late-keyword
    - always-remove-listener
#    - avoid-returning-widgets
    - avoid-unnecessary-setstate
#    - avoid-wrapping-in-padding
    - prefer-intl-name
    - provide-correct-intl-args
# should be enabled in the future
#    - prefer-extracting-callbacks
#    - avoid-unused-parameters
#    - avoid-returning-widgets
#    - avoid-non-null-assertion
#    - member-ordering
#    - member-ordering-extended
